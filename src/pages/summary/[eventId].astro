---
import Layout from '../../layouts/Layout.astro';
import { getSupabaseClient } from '../../lib/supabase';

// Get the event ID from the URL parameters
const { eventId } = Astro.params;

// Check if user is authenticated
const supabase = getSupabaseClient(Astro.cookies);
const { data: { user } } = await supabase.auth.getUser();

console.log('[summary.astro] User from Supabase:', user ? 'authenticated' : 'not authenticated');
console.log('[summary.astro] Event ID:', eventId);

// Redirect to login if not authenticated
if (!user) {
  return Astro.redirect('/login');
}

// Get user ID for passing to component
const userId = user.id;

// Get the base path for navigation
const basePath = import.meta.env.BASE_URL || '/';

// Get summary data for the event
let summaryItems = [];
let totalResults = 0;

if (eventId) {
  try {
    // First fetch completed hunt items
    const { data: summaryItemsData, error: summaryItemsError } = await supabase
      .from('hunt_items')
      .select('*')
      .eq('event_id', eventId)
      .eq('completed', true);

    if (summaryItemsError) {
      console.error('Error fetching summary items:', summaryItemsError);
    } else if (summaryItemsData && summaryItemsData.length > 0) {
      const suggestionIds = summaryItemsData.map(item => item.suggestion_id);
      
      // Then fetch the related suggestions separately
      const { data: suggestionsData, error: suggestionsError } = await supabase
        .from('suggestions')
        .select('id, item')
        .in('id', suggestionIds);
        
      if (suggestionsError) {
        console.error('Error fetching suggestions for summary items:', suggestionsError);
      } else {
        // Create a map of suggestion id to item text
        const suggestionMap = new Map();
        suggestionsData?.forEach(suggestion => {
          suggestionMap.set(suggestion.id, suggestion.item);
        });
        
        // Join the data manually
        summaryItems = summaryItemsData.map(summaryItem => ({
          ...summaryItem,
          item: suggestionMap.get(summaryItem.suggestion_id) || 'Unknown item'
        }));
        
        // Calculate total results
        totalResults = summaryItems.reduce((sum, item) => sum + item.result, 0);
      }
    }
  } catch (e) {
    console.error('Exception during summary fetching:', e);
  }
}

// Get event date for display
let eventDate = '';
let startingBalance = 0;
if (eventId) {
  try {
    const { data: eventData, error: eventError } = await supabase
      .from('suggestion_events')
      .select('date, starting_balance')
      .eq('id', eventId)
      .single();
      
    if (eventError) {
      console.error('Error fetching event date:', eventError);
    } else if (eventData) {
      const date = new Date(eventData.date);
      eventDate = date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      startingBalance = eventData.starting_balance || 0;
    }
  } catch (e) {
    console.error('Exception during event date fetching:', e);
  }
}

// Format item name to be more readable
const formatItemName = (name) => {
  if (!name) return '';
  return name
    .replace(/-/g, ' ')
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

---

<Layout title="Event Summary">
  <main class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Event Summary {eventDate && `- ${eventDate}`}</h1>
      <a href={`${basePath}admin`} class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
        Back to Admin
      </a>
    </div>
    
    {summaryItems.length > 0 ? (
      <div class="bg-white rounded-lg shadow p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
          <h1 class="text-2xl font-bold">Event Summary - {eventDate}</h1>
          <a href={`${basePath}admin`} class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
            Back to Admin
          </a>
        </div>
        
        <div class="mb-6">
          <div class="flex items-center gap-4">
            <div class="p-3 bg-white rounded shadow border">
              <div class="text-sm text-gray-600">Starting Balance</div>
              <div class="text-xl font-bold">{startingBalance}</div>
            </div>
            
            <div class="p-3 bg-white rounded shadow border">
              <div class="text-sm text-gray-600">Total Wager</div>
              <div class="text-xl font-bold">{summaryItems.reduce((sum, item) => sum + item.wager, 0)}</div>
            </div>
            
            <div class="p-3 bg-white rounded shadow border">
              <div class="text-sm text-gray-600">Total Result</div>
              <div class="text-xl font-bold">{summaryItems.reduce((sum, item) => sum + item.result, 0)}</div>
            </div>
            
            <div class="p-3 bg-white rounded shadow border">
              <div class="text-sm text-gray-600">Profit/Loss</div>
              <div class="text-xl font-bold">{totalResults}</div>
            </div>
            
            <div class="p-3 bg-white rounded shadow border">
              <div class="text-sm text-gray-600">Final Balance</div>
              <div class="text-xl font-bold">
                {summaryItems.length > 0 && summaryItems[summaryItems.length - 1].current_balance !== null
                  ? summaryItems[summaryItems.length - 1].current_balance 
                  : "Not set"}
              </div>
            </div>
          </div>
        </div>
        
        <h2 class="text-xl font-semibold mb-4">Completed Items</h2>
        <div class="space-y-4">
          {summaryItems.map(item => (
            <div class="p-3 border rounded-lg">
              <div class="flex justify-between items-center">
                <span>{formatItemName(item.item)}</span>
                <div class="flex items-center gap-4">
                  <span class="font-medium">Wager: {item.wager}</span>
                  <span class="font-medium text-green-600">Result: {item.result}</span>
                  {item.bonus && <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">Bonus</span>}
                  {item.super_bonus && <span class="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">Super Bonus</span>}
                  {item.current_balance !== null && 
                    <span class={`px-2 py-1 rounded-full text-xs ${
                      item.current_balance > 0 
                        ? 'bg-green-100 text-green-800' 
                        : item.current_balance < 0 
                          ? 'bg-red-100 text-red-800' 
                          : 'bg-gray-100 text-gray-800'
                    }`}>
                      Balance: {item.current_balance}
                    </span>
                  }
                </div>
              </div>
            </div>
          ))}
          
          <div class="mt-6 p-4 bg-gray-50 rounded-lg">
            <div class="flex justify-between text-lg font-semibold">
              <span>Total Items Completed:</span>
              <span>{summaryItems.length}</span>
            </div>
            <div class="flex justify-between text-lg font-semibold text-green-600">
              <span>Total Results:</span>
              <span>{totalResults}</span>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6">
        <p>No completed items found for this event. Complete items in the suggestions view to see them here.</p>
      </div>
    )}
  </main>
</Layout>
