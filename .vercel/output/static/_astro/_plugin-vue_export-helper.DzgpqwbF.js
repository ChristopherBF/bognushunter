import{g as a}from"./supabase.CYCWDCT1.js";async function d(n){try{const e=a(),{data:r,error:t}=await e.from("suggestion_events").select("*").eq("created_by",n).order("date",{ascending:!1});return t?{events:[],error:t}:{events:await Promise.all(r.map(async s=>{const{count:c,error:u}=await e.from("suggestions").select("*",{count:"exact",head:!0}).eq("event_id",s.id),{count:i,error:l}=await e.from("hunt_items").select("*",{count:"exact",head:!0}).eq("event_id",s.id);return{...s,suggestions_count:u?0:c||0,hunt_items_count:l?0:i||0}})),error:null}}catch(e){return{events:[],error:e instanceof Error?e:new Error("Unknown error fetching events")}}}async function g(n,e,r=1e3){try{const t=a(),{data:o,error:s}=await t.from("suggestion_events").insert({created_by:e,date:new Date().toISOString(),starting_balance:r,current_balance:r,open:!0}).select().single();return s?{event:null,error:s}:{event:o,error:null}}catch(t){return{event:null,error:t instanceof Error?t:new Error("Unknown error creating event")}}}async function v(n){try{const e=a(),{data:r,error:t}=await e.from("suggestion_events").select("*").eq("id",n).single();return t?{event:null,error:t}:{event:r,error:null}}catch(e){return{event:null,error:e instanceof Error?e:new Error("Unknown error fetching event")}}}async function E(n,e){try{const r=a(),{error:t}=await r.from("suggestion_events").update({starting_balance:e}).eq("id",n);return t?{success:!1,error:t}:{success:!0,error:null}}catch(r){return{success:!1,error:r instanceof Error?r:new Error("Unknown error updating starting balance")}}}async function p(n){try{console.log("closeEvent: Starting to close event with ID:",n);const e=a(),{data:r,error:t}=await e.from("suggestion_events").select("id, open").eq("id",n).maybeSingle();if(t)return console.error("closeEvent: Error checking if event exists:",t),{success:!1,error:t};if(!r)return console.error("closeEvent: Event does not exist:",n),{success:!1,error:new Error("Event not found")};console.log("closeEvent: Event found, current open status:",r.open);const{data:o,error:s}=await e.from("suggestion_events").update({open:!1}).eq("id",n).select("id, open");if(s)return console.error("closeEvent: Error updating event:",s),{success:!1,error:s};if(console.log("closeEvent: Update result - data:",o),!o||o.length===0)return console.error("closeEvent: No rows were updated - this suggests a permission or constraint issue"),{success:!1,error:new Error("No rows were updated - check database permissions")};const{data:c,error:u}=await e.from("suggestion_events").select("id, open").eq("id",n).single();return u?(console.error("closeEvent: Error verifying update:",u),{success:!1,error:u}):(console.log("closeEvent: Verification - event status after update:",c),c.open!==!1?(console.error("closeEvent: Update did not persist - database shows open:",c.open),{success:!1,error:new Error("Update did not persist in database")}):(console.log("closeEvent: Event successfully closed and verified in database"),{success:!0,error:null}))}catch(e){return console.error("closeEvent: Exception occurred:",e),{success:!1,error:e instanceof Error?e:new Error("Unknown error closing event")}}}async function w(n,e){try{const r=a(),{error:t}=await r.from("suggestion_events").update({current_balance:e}).eq("id",n);return t?{success:!1,error:t}:{success:!0,error:null}}catch(r){return{success:!1,error:r instanceof Error?r:new Error("Unknown error updating current balance")}}}async function _(){try{const n=a(),{data:e,error:r}=await n.from("suggestion_events").select("id").eq("open",!0).order("date",{ascending:!1}).limit(1).single();return r?(console.log("Error fetching first open event:",r),{eventId:null,error:r}):e?{eventId:e.id,error:null}:{eventId:null,error:new Error("No open events found")}}catch(n){return{eventId:null,error:n instanceof Error?n:new Error("Unknown error fetching open event ID")}}}const h=(n,e)=>{const r=n.__vccOpts||n;for(const[t,o]of e)r[t]=o;return r};export{h as _,g as a,w as b,p as c,_ as d,d as f,v as g,E as u};
