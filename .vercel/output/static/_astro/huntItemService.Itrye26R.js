import{g as f}from"./supabase.CYCWDCT1.js";import{d as m}from"./_plugin-vue_export-helper.DzgpqwbF.js";async function E(e){try{const t=f(),{data:r,error:n}=await t.from("suggestions").select("id, item, user_id, created_at, event_id, custom_thumb, url_background").eq("event_id",e);if(n)return{suggestions:[],error:n};const u=new Map,s=new Map,a=new Map,i=new Map;r?.forEach(o=>{const l=o.item,g=u.get(l)||0;s.has(l)||(s.set(l,o.id),o.custom_thumb&&a.set(l,o.custom_thumb),o.url_background&&i.set(l,o.url_background)),u.set(l,g+1)});const d=new Map;r?.forEach(o=>{!d.has(o.item)&&s.get(o.item)===o.id&&d.set(o.item,o)});const c=Array.from(u.entries()).map(([o,l])=>{const g=d.get(o)||{};return{id:s.get(o),...g,item:o,count:l,event_id:e,custom_thumb:a.get(o)||null,url_background:i.get(o)||null,url_thumb:null,provider:""}});return c.sort((o,l)=>l.count-o.count),{suggestions:c,error:null}}catch(t){return{suggestions:[],error:t instanceof Error?t:new Error("Unknown error fetching suggestions")}}}async function h(e,t,r=null){try{const n=f(),u={custom_thumb:t};r&&(u.url_background=r);const{error:s}=await n.from("suggestions").update(u).eq("id",e);return s?{success:!1,error:s}:{success:!0,error:null}}catch(n){return{success:!1,error:n instanceof Error?n:new Error("Unknown error saving custom thumbnail")}}}async function v(e,t){try{const r=[...e];for(const n of r){if(n.custom_thumb)continue;const u=await fetch(`${t||"/"}api/games`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({search:n.item,page:1,perPage:1})});if(u.ok){const s=await u.json();if(s.games&&s.games.length>0){const i=s.games.find(d=>d.name.toLowerCase()===n.item.toLowerCase())||s.games[0];n.custom_thumb=i.custom_thumb||i.url_thumb,n.url_background=i.url_background||null,n.provider=i.provider,await h(n.id,n.custom_thumb,n.url_background)}}}return{updatedSuggestions:r,error:null}}catch(r){return{updatedSuggestions:e,error:r instanceof Error?r:new Error("Error fetching game data for suggestions")}}}async function p(e,t,r,n,u){try{const s=f();console.log("Adding suggestion:",e,t,r);let a=e;if(e){const{data:c,error:o}=await s.from("suggestion_events").select("id, open").eq("id",e).eq("open",!0).maybeSingle();if(o||!c){console.log("Provided eventId does not exist or is closed, fetching first open event");const{eventId:l,error:g}=await m();if(g||!l)return{suggestion:null,error:new Error("No open events available. Please create an event first.")};a=l,console.log("Using first open event instead:",a)}}else{console.log("No eventId provided, fetching first open event");const{eventId:c,error:o}=await m();if(o||!c)return{suggestion:null,error:new Error("No open events available. Please create an event first.")};a=c,console.log("Using first open event:",a)}const{data:i,error:d}=await s.from("suggestions").insert({event_id:a,item:t,user_id:r,custom_thumb:n||null,url_background:u||null}).select().single();return d?{suggestion:null,error:d}:{suggestion:i,error:null}}catch(s){return{suggestion:null,error:s instanceof Error?s:new Error("Unknown error adding suggestion")}}}async function I(e){try{const t=f(),{data:r,error:n}=await t.from("hunt_items").select("*").eq("event_id",e);if(n)return{huntItems:[],error:n};if(r&&r.length>0){const u=r.map(c=>c.suggestion_id),{data:s,error:a}=await t.from("suggestions").select("id, item").in("id",u);if(a)return{huntItems:[],error:a};const i=new Map;return s?.forEach(c=>{i.set(c.id,c.item)}),{huntItems:r.map(c=>({...c,item:i.get(c.suggestion_id)||"Unknown item"})),error:null}}else return{huntItems:[],error:null}}catch(t){return{huntItems:[],error:t instanceof Error?t:new Error("Unknown error fetching hunt list")}}}async function _(e,t){try{const r=f(),{data:n,error:u}=await r.from("hunt_items").select("suggestion_id").eq("event_id",e);if(u)return{huntItem:null,error:u,exists:!1};if(n.some(d=>d.suggestion_id===t.id))return{huntItem:null,error:null,exists:!0};const{data:a,error:i}=await r.from("hunt_items").insert({event_id:e,suggestion_id:t.id,wager:1,result:0,bonus:!1,super_bonus:!1,completed:!1,active:!0,custom_thumb:t.custom_thumb||null,url_background:t.url_background||null}).select().single();return i?{huntItem:null,error:i,exists:!1}:{huntItem:a,error:null,exists:!1}}catch(r){return{huntItem:null,error:r instanceof Error?r:new Error("Unknown error adding to hunt list"),exists:!1}}}async function k(e){try{const t=f(),{data:r,error:n}=await t.from("hunt_items").select("*").eq("id",e).single();if(n)return{success:!1,error:n,data:null};const{error:u,data:s}=await t.from("hunt_items").delete().eq("id",e).select();return u?{success:!1,error:u,data:null}:{success:!0,error:null,data:s}}catch(t){return{success:!1,error:t instanceof Error?t:new Error("Unknown error removing from hunt list"),data:null}}}async function y(e){try{const t=f();console.log("Updating hunt item with ID:",e.id);const r={};r.wager=e.wager,r.result=e.result,r.bonus=e.bonus,r.super_bonus=e.super_bonus,r.completed=e.completed,r.active=e.active,e.custom_thumb&&(r.custom_thumb=e.custom_thumb),e.url_background&&(r.url_background=e.url_background),console.log("Update data:",r);const{data:n,error:u}=await t.from("hunt_items").update(r).eq("id",e.id).eq("event_id",e.event_id).eq("suggestion_id",e.suggestion_id).select();if(u)return console.error("Error updating hunt item:",u),{huntItem:null,error:u};if(console.log("Update result:",n),!n||n.length===0){const{data:s,error:a}=await t.from("hunt_items").select("*").eq("id",e.id).maybeSingle();return a?(console.error("Error fetching hunt item after failed update:",a),{huntItem:null,error:new Error(`Failed to update hunt item: ${a.message}`)}):s?(console.error("Item exists but could not be updated:",s),{huntItem:null,error:new Error("Hunt item exists but could not be updated. Check permissions or constraints.")}):(console.error("Hunt item not found during update verification:",e.id),{huntItem:null,error:new Error(`Hunt item with ID ${e.id} not found. It may have been deleted.`)})}return{huntItem:n[0],error:null}}catch(t){return console.error("Exception in updateHuntItem:",t),{huntItem:null,error:t instanceof Error?t:new Error("Unknown error updating hunt item")}}}async function x(e,t,r,n,u){try{let s=e;if(!e){const{eventId:l,error:g}=await m();if(g||!l)return{huntItem:null,error:new Error("No open events available. Please create an event first."),exists:!1};s=l}const{suggestion:a,error:i}=await p(s,t,r,n,u);if(i||!a)return{huntItem:null,error:i||new Error("Failed to create suggestion"),exists:!1};const{huntItem:d,error:c,exists:o}=await _(s,a);return c?{huntItem:null,error:c,exists:o}:{huntItem:d,error:null,exists:o}}catch(s){return{huntItem:null,error:s instanceof Error?s:new Error("Unknown error adding game to hunt list"),exists:!1}}}export{x as a,E as b,p as c,v as d,_ as e,I as f,k as r,h as s,y as u};
