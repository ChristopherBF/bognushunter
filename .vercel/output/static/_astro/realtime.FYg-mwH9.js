import{g as r}from"./supabase.CYCWDCT1.js";const o={};function h(s,n){const c=r(),e=`suggestions-${s}`;if(console.log("[RealTime] [DEBUG] subscribeSuggestions CALLED for event:",s),o[e])return console.log("[RealTime] [DEBUG] Reusing existing subscription for event:",s),o[e].callbacks.push(n),()=>a(s,n);const i=c.channel(e).on("postgres_changes",{event:"*",schema:"public",table:"suggestions",filter:`event_id=eq.${s}`},l=>{console.log("[RealTime] [DEBUG] postgres_changes callback FIRED"),console.log("[RealTime] [DEBUG] Raw payload:",l);const t={...l,eventType:l.eventType};t.new&&console.log("[RealTime] [DEBUG] payload.new.event_id:",t.new.event_id,"expected:",s),console.log("[RealTime] [DEBUG] Triggering callbacks for event:",s),o[e].callbacks.forEach(g=>g(t))}).subscribe();return console.log("[RealTime] [DEBUG] Called .subscribe() for channel:",e),o[e]={channel:i,callbacks:[n]},console.log("[RealTime] [DEBUG] Suggestions subscription set up for event:",s),()=>a(s,n)}function a(s,n){const c=`suggestions-${s}`,e=o[c];e&&(e.callbacks=e.callbacks.filter(i=>i!==n),e.callbacks.length===0&&(console.log("[RealTime] No more callbacks for event:",s,"unsubscribing"),e.channel.unsubscribe(),delete o[c]))}function f(s,n){const c=r(),e=`hunt-items-${s}`;if(console.log("[RealTime] Setting up hunt items subscription for event:",s),o[e])return console.log("[RealTime] Reusing existing subscription for event:",s),o[e].callbacks.push(n),()=>u(s,n);const i=c.channel(e).on("postgres_changes",{event:"*",schema:"public",table:"hunt_items",filter:`event_id=eq.${s}`},l=>{console.log("[RealTime] Received hunt item change"),console.log("[RealTime] Triggering callbacks for hunt item change in event:",s),o[e].callbacks.forEach(t=>t(l))}).subscribe();return o[e]={channel:i,callbacks:[n]},()=>u(s,n)}function u(s,n){const c=`hunt-items-${s}`,e=o[c];e&&(e.callbacks=e.callbacks.filter(i=>i!==n),e.callbacks.length===0&&(console.log("[RealTime] No more callbacks for event:",s,"unsubscribing"),e.channel.unsubscribe(),delete o[c]))}export{f as a,h as s};
